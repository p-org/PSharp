using System;
using System.Threading.Tasks;

namespace PingPong.AsyncAwait
{
    /// <summary>
    /// A P# machine that models a simple server.
    ///
    /// It receives 'Ping' events from a client, and responds with a 'Pong' event.
    /// </summary>
    internal machine Server
    {
        /// <summary>
        /// Event declaration of a 'Pong' event that does not contain any payload.
        /// </summary>
        internal event Pong;

        start state Active
        {
            /// <summary>
			/// Whenever a 'Ping' event is dequeued while the server machine is in the
			/// 'Active' state, the 'on ... do ...' action declaration will execute the
			/// 'SendPong' method; the method invocation will automatically be asynchronous
			/// due to the Task return type of SendPong, and no 'await' is required here.
			/// See client.psharp for an example of an async anonymous action, which does
			/// require an explicit async declaration.
            /// </summary>
            on Client.Ping do SendPong;
        }

        async Task SendPong()
        {
            await Task.Delay(42); // Simple await operation (compiler will warn if no awaits are present).

            // Receives a reference to a client machine (as a payload of
            // the 'Ping' event).
            var client = (trigger as Client.Ping).client;
            // Sends (asynchronously) a 'Pong' event to the client.
            send(client, Pong);
        }
    }
}
