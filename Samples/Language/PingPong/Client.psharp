namespace PingPong
{
    /// <summary>
    /// A P# machine that models a simple client.
    ///
    /// It sends 'Ping' events to a server, and handles received 'Pong' event.
    /// </summary>
    internal machine Client
    {
        /// <summary>
        /// Event declaration of a 'Config' event that contains for payload a
        /// reference to the server machine (send by the 'NetworkEnvironment'
        /// machine upon creation of the client).
        /// </summary>
        internal event Config (server: machine);

        /// <summary>
        /// Event declaration of a 'Unit' event that does not contain any payload.
        /// </summary>
        internal event Unit;

        /// <summary>
        /// Event declaration of a 'Ping' event that contains for payload a
        /// reference to the client machine.
        /// </summary>
        internal event Ping (client: machine);

        /// <summary>
        /// Reference to the server machine.
        /// </summary>
        machine Server;

        /// <summary>
        /// A counter for ping-pong turns.
        /// </summary>
        int Counter;

        start state Init
        {
            entry
            {
                // Receives a reference to a server machine (as a payload of
                // the 'Config' event).
                this.Server = (trigger as Config).server;
                this.Counter = 0;

                // Notifies the P# runtime that the machine must transition
                // to the 'Active' state when 'entry' returns.
                jump(Active);
            }
        }

        // Illustrating state inheritance.
        state Active : ActiveBaseState { }

        state ActiveBaseState
        {
            entry
            {
                SendPing();
            }

            /// <summary>
            /// The 'on ... do ...' action declaration will execute (asynchrously)
            /// the 'SendPing' method, whenever a 'Pong' event is dequeued while the
            /// client machine is in the 'Active' state.
            /// </summary>
            on Server.Pong do SendPing;
        }

        void SendPing()
        {
            this.Counter++;

            // Sends (asynchronously) a 'Ping' event to the server that contains
            // a reference to this client as a payload.
            send(this.Server, Ping, this);

            this.Logger.WriteLine("Client request: {0} / 5", this.Counter);

            if (this.Counter == 5)
            {
                // If 5 'Ping' events were sent, then raise the special event 'halt'.
                //
                // Raising an event, notifies the P# runtime to execute the event handler
                // that corresponds to this event in the current state, when 'SendPing'
                // returns.
                //
                // In this case, when the machine handles the special event 'halt', it
                // will terminate the machine and release any resources. Note that the
                // 'halt' event is handled automatically, the user does not need to
                // declare an event handler in the state declaration.
                raise(halt);
            }
        }
    }
}
