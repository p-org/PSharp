using System;
using System.Collections.Generic;

namespace MultiPaxos
{
    machine PaxosNode
    {
	    machine CurrentLeader;
		int CurrentLeaderRank;
		machine LeaderElectionService;

		// Proposer.
		List<machine> Acceptors;
		int CommitValue;
		int ProposeVal;
		int Majority;
		int MyRank;
		Tuple<int, int> NextProposal;
		Tuple<Tuple<int, int>, int> ReceivedAgree;
		int MaxRound;
		int AcceptCounter;
		int AgreeCounter;
		machine Timer;
		int NextSlotForProposer;
		bool CurrCommitOperation;

		// Acceptor.
		Dictionary<int, Tuple<Tuple<int, int>, int>> AcceptorSlots;

		// Learner.
		Dictionary<int, Tuple<Tuple<int, int>, int>> LearnerSlots;
		int LastExecutedSlot;

		start state Init
        {
			on nodeConfig do Configure;
			on allNodes do UpdateAcceptors;
			on local goto PerformOperation;
			defer ping;
        }

		void Configure()
        {
            Acceptors = new List<machine>();
			AcceptorSlots = new Dictionary<int, Tuple<Tuple<int, int>, int>>();
			LearnerSlots = new Dictionary<int, Tuple<Tuple<int, int>, int>>();

			NextProposal = Tuple.Create(0, 0);
			ReceivedAgree = Tuple.Create(Tuple.Create(0, 0), 0);

			MyRank = (trigger as nodeConfig).rank;
			CurrentLeader = this;
			CurrentLeaderRank = MyRank;

			MaxRound = 0;
			AgreeCounter = 0;

			Timer = create(Timer);
			send(Timer, timerConfig, this, 10);

			LastExecutedSlot = 0;
			NextSlotForProposer = 0;
        }

		void UpdateAcceptors()
		{
			Acceptors = (trigger as allNodes).nodes;
			Majority = Acceptors.Count/2 + 1;
			assert(Majority == 2);

			// Start the leader election service.
			LeaderElectionService = create(LeaderElection);
			send(LeaderElectionService, leaderElectionConfig, Acceptors, this, MyRank);

			raise(local);
		}

		state PerformOperation
		{
		    ignore agree, accepted, timeout;

			// Proposer.
			on update do CheckIfLeader;
			on goPropose push ProposeValuePhase1;

			// Acceptor.
			on prepare do PrepareFun;
			on accept do Acceptfun;

			// Learner.
			on chosen push RunLearner;

			// Leader election.
			on newLeader do UpdateLeader;
		}

		void CheckIfLeader()
		{
		    if (CurrentLeaderRank == MyRank)
			{
			    // The node is the leader.
				CommitValue = (trigger as update).value;
				ProposeVal = CommitValue;
				raise(goPropose);
			}
			else
			{
			    // Forward it to the leader.
				var leader = (trigger as update).leader;
				var value = (trigger as update).value;
				send(CurrentLeader, update, leader, value);
			}
		}

		void UpdateLeader()
		{
		    CurrentLeader = (trigger as newLeader).currentLeader;
		    CurrentLeaderRank = (trigger as newLeader).currentLeaderRank;
		}

		void PrepareFun()
		{
			var proposer = (trigger as prepare).proposer;
			var slot = (trigger as prepare).slot;
			var proposal = (trigger as prepare).proposal;

			if (!AcceptorSlots.ContainsKey(slot))
			{
			    send(proposer, agree, slot, Tuple.Create(-1, -1), -1);
				AcceptorSlots.Add(slot, Tuple.Create(Tuple.Create(proposal.Item1, proposal.Item2), -1));
			}

			if (LessThan(proposal, AcceptorSlots[slot].Item1))
			{
			    send(proposer, reject, slot, AcceptorSlots[slot].Item1.Item1);
			}
			else
			{
			    send(proposer, agree, slot, proposal, AcceptorSlots[slot].Item2);
				AcceptorSlots[slot] = Tuple.Create(Tuple.Create(proposal.Item1, proposal.Item2), -1);
			}
		}

		void Acceptfun()
		{
		    var proposer = (trigger as accept).proposer;
		    var slot = (trigger as accept).slot;
		    var proposal = (trigger as accept).proposal;
		    var value = (trigger as accept).value;

			if (AcceptorSlots.ContainsKey(slot))
			{
			    if (!Equal(proposal, AcceptorSlots[slot].Item1))
				{
				    send(proposer, reject, slot, AcceptorSlots[slot].Item1.Item1);
				}
				else
				{
				    AcceptorSlots[slot] = Tuple.Create(proposal, value);
					send(proposer, accepted, slot, proposal, value);
				}
			}
		}

		Tuple<int, int> GetNextProposal(int maxRound)
		{
		    return Tuple.Create(maxRound + 1, MyRank);
		}

		bool Equal (Tuple<int, int> p1, Tuple<int, int> p2)
		{
		    if (p1.Item1 == p2.Item1 && p1.Item2 == p2.Item2)
			    return true;
			else
			    return false;
		}

		bool LessThan (Tuple<int, int> p1, Tuple<int, int> p2)
		{
		    if (p1.Item1 < p2.Item1)
			{
			    return true;
			}
			else if (p1.Item1 == p2.Item1)
			{
			    if (p1.Item2 < p2.Item2)
				    return true;
			    else
				    return false;
			}
			else
			{
			    return false;
			}
		}

		// Proposer.

		state ProposeValuePhase1
		{
		    ignore accepted;

		    entry
			{
			    AgreeCounter = 0;
				NextProposal = GetNextProposal(MaxRound);
				ReceivedAgree = Tuple.Create(Tuple.Create(-1, -1), -1);

				foreach (var acceptor in Acceptors)
				{
			        send(acceptor, prepare, this, NextSlotForProposer, NextProposal);
				}

				monitor<ValidityCheck>(monitor_proposer_sent, ProposeVal);
				send(Timer, startTimer);
			}

			on agree do CountAgree;

			on reject goto ProposeValuePhase1 with {
			    var round = (trigger as reject).round;
			    if (NextProposal.Item1 <= round)
				    MaxRound = round;

			    send(Timer, cancelTimer);
			}

			on success goto ProposeValuePhase2 with
			{
			    send(Timer, cancelTimer);
		    }

			on timeout goto ProposeValuePhase1;
		}

		void CountAgree()
		{
		    var slot = (trigger as agree).slot;
		    var proposal = (trigger as agree).proposal;
			var value = (trigger as agree).value;

			if (slot == NextSlotForProposer)
			{
			    AgreeCounter++;

				if (LessThan(ReceivedAgree.Item1, proposal))
				{
				    ReceivedAgree = Tuple.Create(proposal, value);
				}

				if (AgreeCounter == Majority)
				    raise(success);
			}
		}

		int GetHighestProposedValue()
		{
		    if (ReceivedAgree.Item2 != -1)
		    {
			    CurrCommitOperation = false;
			    return ReceivedAgree.Item2;
		    }
		    else
		    {
			    CurrCommitOperation = true;
			    return CommitValue;
		    }
		}

		state ProposeValuePhase2
		{
		    ignore agree;

			entry
			{
			    AcceptCounter = 0;
				ProposeVal = GetHighestProposedValue();

				// Monitor the monitor on proposal event.
				//monitor<BasicPaxosInvariant_P2b>(monitor_valueProposed, this, NextSlotForProposer, NextProposal, ProposeVal);
				monitor<ValidityCheck>(monitor_proposer_sent, ProposeVal);

				foreach (var acceptor in Acceptors)
				{
			        send(acceptor, accept, this, NextSlotForProposer, NextProposal, ProposeVal);
				}

				send(Timer, startTimer);
			}

			exit
			{
			    if (trigger.GetType() == typeof(chosen))
				{
				    // The value is chosen, hence invoke the monitor on chosen event.
					//monitor<BasicPaxosInvariant_P2b>(monitor_valueChosen, this, NextSlotForProposer, NextProposal, ProposeVal);
					send(Timer, cancelTimer);
					monitor<ValidityCheck>(monitor_proposer_chosen, ProposeVal);

					// Increment the nextSlotForProposer.
					NextSlotForProposer++;
				}
			}

			on accepted do CountAccepted;

			on reject goto ProposeValuePhase1 with {
			    var round = (trigger as reject).round;
			    if (NextProposal.Item1 <= round)
				    MaxRound = round;

			    send(Timer, cancelTimer);
			}

			on timeout goto ProposeValuePhase1;
		}

		void CountAccepted()
		{
		    var slot = (trigger as accepted).slot;
		    var proposal = (trigger as accepted).proposal;
			var value = (trigger as accepted).value;

			if (slot == NextSlotForProposer)
			{
			    if (this.Equal(proposal, NextProposal))
				{
				    AcceptCounter++;
				}

				if (AcceptCounter == Majority)
				{
				    raise(chosen, slot, proposal, value);
				}
			}
		}

		// Learner.

		void RunReplicatedMachine()
		{
		    while (true)
			{
			    if (LearnerSlots.ContainsKey(LastExecutedSlot + 1))
			    {
				    // Run the machine.
				    LastExecutedSlot++;
			    }
			    else
			    {
				    return;
			    }
		    }
		}

		state RunLearner
		{
		    ignore agree, accepted, timeout, prepare, reject, accept;

			defer newLeader;

			entry
			{
				var slot = (trigger as chosen).slot;
				var proposal = (trigger as chosen).proposal;
				var value = (trigger as chosen).value;

				if (!LearnerSlots.ContainsKey(slot))
				{
				    LearnerSlots.Add(slot, Tuple.Create(proposal, value));
				}
				else
				{
				    LearnerSlots[slot] = Tuple.Create(proposal, value);
				}

				RunReplicatedMachine();

				if (CurrCommitOperation && CommitValue == value)
				{
				    pop;
				}
				else
				{
				    ProposeVal = CommitValue;
					raise(goPropose);
				}
			}
		}
    }
}
