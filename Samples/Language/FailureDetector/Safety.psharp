using System.Collections.Generic;

namespace FailureDetector
{
	/// <summary>
    /// Monitors allow the P# testing engine to detect global safety property
    /// violations. This monitor gathers 'Ping' and 'Pong' events and manages
    /// the per-client history.
	///
    /// 'Ping' increments the client ping count and 'Pong' decrements it.
	///
    /// A safety violation is reported if the ping count is less than 0 or
    /// greater than 3 (these indicate unmatched updates).
    /// </summary>
    monitor Safety
    {
		internal event Ping (client: machine);
		internal event Pong (node: machine);

	    Dictionary<machine, int> Pending;

        start state Init
        {
		    entry
			{
			    this.Pending = new Dictionary<machine, int>();
			}

			on Ping do
			{
				var client = (trigger as Ping).client;
			    if (!this.Pending.ContainsKey(client))
				{
				    this.Pending[client] = 0;
				}

				this.Pending[client] = this.Pending[client] + 1;
				assert(this.Pending[client] <= 3, $"'{client}' ping count must be <= 3.");
			}

			on Pong do
			{
				var node = (trigger as Pong).node;
			    assert(this.Pending.ContainsKey(node), $"'{node}' is not in pending set.");
				assert(this.Pending[node] > 0, $"'{node}' ping count must be > 0.");
				this.Pending[node] = this.Pending[node] - 1;
			}
        }
    }
}
