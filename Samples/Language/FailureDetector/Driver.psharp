// ------------------------------------------------------------------------------------------------

using System.Collections.Generic;

namespace FailureDetector
{
	/// <summary>
    /// This is the test harness responsible for creating a
    /// user-defined number of nodes, and registering them
    /// with a failure detector machine.
    ///
    /// The driver is also responsible for injecting failures
    /// to the nodes for testing purposes.
    /// </summary>
    machine Driver
    {
		internal event Config (numOfNodes: int);
		internal event RegisterClient (client: machine);
		internal event UnregisterClient (client: machine);

        machine FailureDetector;
		HashSet<machine> Nodes;
		int NumOfNodes;

        start state Init
        {
            entry
            {
				this.NumOfNodes = (trigger as Config).numOfNodes;

				// Initializes the nodes.
				this.Nodes = new HashSet<MachineId>();
				for (int i = 0; i < this.NumOfNodes; i++)
				{
					var node = create(Node);
					this.Nodes.Add(node);
				}

				monitor<Liveness>(Liveness.RegisterNodes, this.Nodes);

                this.FailureDetector = create(FailureDetector, FailureDetector.Config, this.Nodes);
				send(this.FailureDetector, RegisterClient, this);

				jump(InjectFailures);
            }
        }

		state InjectFailures
		{
			/// <summary>
			/// Injects failures (modelled with the special P# event 'halt').
			/// </summary>
			entry
			{
				foreach (var node in this.Nodes)
				{
					send(node, halt);
				}
			}

			/// <summary>
			/// Notify liveness monitor of node failure.
			/// </summary>
			on FailureDetector.NodeFailed do
			{
				var node = (trigger as FailureDetector.NodeFailed).node;
				monitor<Liveness>(FailureDetector.NodeFailed, node);
			}
		}
    }
}
