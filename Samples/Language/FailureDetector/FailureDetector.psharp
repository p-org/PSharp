// ------------------------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License (MIT). See License.txt in the repo root for license information.
// ------------------------------------------------------------------------------------------------

using System.Collections.Generic;

namespace FailureDetector
{
	/// <summary>
    /// Implementation of a failure detector P# machine.
    /// </summary>
    machine FailureDetector
    {
		internal event Config (nodes: HashSet<machine>);
		internal event NodeFailed (node: machine);
		event TimerCancelled;
		event RoundDone;
		event Unit;

		/// <summary>
        /// Nodes to be monitored.
        /// </summary>
	    HashSet<machine> Nodes;

		/// <summary>
        /// Set of registered clients.
        /// </summary>
		HashSet<machine> Clients;

		/// <summary>
        /// Number of made 'Ping' attempts.
        /// </summary>
		int Attempts;

		/// <summary>
        /// Set of alive nodes.
        /// </summary>
		HashSet<machine> Alive;

		/// <summary>
        /// Collected responses in one round.
        /// </summary>
		HashSet<machine> Responses;

		/// <summary>
        /// Reference to the timer machine.
        /// </summary>
        machine Timer;

		start state Init
        {
			entry
			{
                var nodes = (trigger as Config).nodes;

				this.Nodes = new HashSet<machine>(nodes);
				this.Clients = new HashSet<machine>();
				this.Alive = new HashSet<machine>();
				this.Responses = new HashSet<machine>();

				// Initializes the alive set to contain all available nodes.
				foreach (var node in this.Nodes)
				{
					this.Alive.Add(node);
				}

				// Initializes the timer.
				this.Timer = create(Timer, Timer.Config, this);

				// Transitions to the 'SendPing' state after everything has initialized.
                raise(Unit);
			}

			on Driver.RegisterClient do
			{
				var client = (trigger as Driver.RegisterClient).client;
			    this.Clients.Add(client);
			}

			on Driver.UnregisterClient do
			{
				var client = (trigger as Driver.UnregisterClient).client;
			    if (this.Clients.Contains(client))
				{
				    this.Clients.Remove(client);
				}
			}

			on Unit push SendPing;
        }

		state SendPing
		{
		    entry
			{
				foreach (var node in this.Nodes)
				{
					// Sends a 'Ping' event to any machine that has not responded.
					if (this.Alive.Contains(node) && !this.Responses.Contains(node))
					{
						monitor<Safety>(Safety.Ping, node);
						send(node, Node.Ping, this);
					}
				}

				// Starts the timer with a given timeout value. Note that in this sample,
				// the timeout value is not actually used, because the timer is abstracted
				// away using P# to enable systematic testing (i.e. timeouts are triggered
				// nondeterministically). In production, this model timer machine will be
				// replaced by a real timer.
				send(this.Timer, Timer.StartTimerEvent, 100);
			}

			/// <summary>
			/// This action is triggered whenever a node replies with a 'Pong' event.
			/// </summary>
			on Node.Pong do
			{
			    if (this.Alive.Contains((trigger as Node.Pong).node))
				{
				    this.Responses.Add((trigger as Node.Pong).node);

					// Checks if the status of alive nodes has changed.
					if (this.Responses.Count == this.Alive.Count)
					{
					    send(this.Timer, Timer.CancelTimer);
						raise(TimerCancelled);
					}
				}
			}

			on TimerCancelled push WaitForCancelResponse;

			on Timer.Timeout do
			{
				// One attempt is done for this round.
			    this.Attempts++;

				// Each round has a maximum number of 2 attempts.
				if (this.Responses.Count < this.Alive.Count && this.Attempts < 2)
				{
					// Retry by looping back to same state.
				    jump(SendPing);
				}
				else
				{
					foreach (var node in this.Nodes)
					{
						if (this.Alive.Contains(node) && !this.Responses.Contains(node))
						{
							this.Alive.Remove(node);

							// Send failure notification to any clients.
							foreach (var client in this.Clients)
							{
								this.Send(client, new NodeFailed(node));
							}
						}
					}

					raise(RoundDone);
				}
			}

			on RoundDone goto Reset;
		}

		state WaitForCancelResponse
		{
		    defer Timer.Timeout, Node.Pong;

			on Timer.CancelSuccess do
			{
			    raise(RoundDone);
			}

			on Timer.CancelFailure do
			{
			    pop;
			}
		}

		state Reset
		{
			/// <summary>
			/// Prepares the failure detector for the next round.
			/// </summary>
		    entry
			{
			    this.Attempts = 0;
				this.Responses.Clear();

				// Starts the timer with a given timeout value (see details above).
				send(this.Timer, Timer.StartTimerEvent, 1000);
			}

			on Timer.Timeout goto SendPing;
			ignore Node.Pong;
		}
    }
}
