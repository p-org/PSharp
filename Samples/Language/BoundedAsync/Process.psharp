using System;

namespace BoundedAsync
{
	/// <summary>
    /// Process machine that communicates with its left and right
    /// neighbour machines.
    /// </summary>
    internal machine Process
    {
		internal event Config (scheduler: machine);
		internal event Initialize (left: machine, right: machine);
		internal event MyCount (count: int);
		internal event Resp;
        internal event Req;

		/// <summary>
        /// Reference to the scheduler machine.
        /// </summary>
        machine Scheduler;

		/// <summary>
        /// Reference to the left process machine.
        /// </summary>
        machine Left;

		/// <summary>
        /// Reference to the right process machine.
        /// </summary>
        machine Right;

        int Count;

		/// <summary>
        /// It starts in the 'Init' state, where it receives a reference
        /// to its neighbour machines. When it receives the references,
        /// it fires a 'Req' event to the scheduler.
        /// </summary>
        start state Init
        {
            entry
            {
				// Receives a reference to the scheduler machine (as a payload of
				// the 'Config' event).
				this.Scheduler = (trigger as Config).scheduler;
				this.Count = 0;
            }

            on Initialize do InitializeAction;
        }

        void InitializeAction()
        {
			// Receives a reference to the left process machine (as a payload of
            // the 'Initialize' event).
			this.Left = (trigger as Initialize).left;

			// Receives a reference to the right process machine (as a payload of
            // the 'Initialize' event).
            this.Right = (trigger as Initialize).right;

			// Send a 'Req' event to the scheduler machine.
            send(Scheduler, Req);

			// Transition to the 'Syncing' state in the end of this action.
            jump(Syncing);
        }


		/// <summary>
        /// In this state, the machine sends the current count value to its
        /// neightbour machines, and a 'Req' event to the scheduler.
        ///
        /// When the scheduler responds with a 'Resp' event, it handles it
        /// with the 'Sync' action.
        ///
        /// When the machine dequeues a 'MyCount' event, it handles it with
        /// the 'ConfirmInSync' action, which asserts that the count value
        /// is the expected one.
        /// </summary>
        state Syncing
        {
            on Resp do Sync;
            on MyCount do ConfirmInSync;
        }

        void Sync()
        {
            this.Count++;

            send(this.Left, MyCount, this.Count);
            send(this.Right, MyCount, this.Count);
            send(this.Scheduler, Req);

            // When the count reaches the value 10, the machine halts.
            if (this.Count == 10)
            {
                raise(halt);
            }
        }

        void ConfirmInSync()
        {
            int count = (trigger as MyCount).count;

            // Asserts that the count value is the expected one.
            assert(this.Count == count || this.Count == count - 1,
                $"Received count of '{count}', while current count is {this.Count}.");
        }
    }
}
