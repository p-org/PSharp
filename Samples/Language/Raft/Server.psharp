// ------------------------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License (MIT). See License.txt in the repo root for license information.
// ------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Raft
{
    machine Server
    {
        int ServerId;
        machine ClusterManager;
        List<machine> Servers;
        machine LeaderId;
        machine ElectionTimer;
        machine PeriodicTimer;
        int CurrentTerm;
        machine VotedFor;
        List<Log> Logs;
        int CommitIndex;
        int LastApplied;
        Dictionary<machine, int> NextIndex;
        Dictionary<machine, int> MatchIndex;
        int VotesReceived;
        Request LastClientRequest;


		start state Init
		{
			entry
			{
				this.CurrentTerm = 0;
				this.LeaderId = null;
				this.VotedFor = null;
				this.Logs = new List<Log>();
				this.CommitIndex = 0;
				this.LastApplied = 0;
				this.NextIndex = new Dictionary<machine, int>();
	            this.MatchIndex = new Dictionary<machine, int>();
			}

			on SConfigureEvent do Configure;
			on BecomeFollower goto Follower;
			defer VoteRequest, AppendEntriesRequest;
		}

		void Configure()
        {
            this.ServerId = (trigger as SConfigureEvent).Id;
            this.Servers = (trigger as SConfigureEvent).Servers;
            this.ClusterManager = (trigger as SConfigureEvent).ClusterManager;

            this.ElectionTimer = create(ElectionTimer);
            send(this.ElectionTimer, EConfigureEvent, this.Id);

            this.PeriodicTimer = create(PeriodicTimer);
            send(this.PeriodicTimer, PConfigureEvent, this.Id);

            raise(BecomeFollower);
        }

		state Follower
		{
			entry
			{
				this.LeaderId = null;
				this.VotesReceived = 0;

				send(this.ElectionTimer, EStartTimer);
			}

			on Request do RedirectClientRequest;
			on VoteRequest do VoteAsFollower;
			on VoteResponse do RespondVoteAsFollower;
			on AppendEntriesRequest do AppendEntriesAsFollower;
			on AppendEntriesResponse do RespondAppendEntriesAsFollower;
			on ETimeout do StartLeaderElection;
			on ShutDown do ShuttingDown;
			on BecomeFollower goto Follower;
			on BecomeCandidate goto Candidate;
			ignore PTimeout;
		}

		void RedirectClientRequest()
        {
            if (this.LeaderId != null)
            {
                send(this.LeaderId, Request, (trigger as Request).Client, (trigger as Request).Command);
            }
            else
            {
                send(this.ClusterManager, RedirectRequest, (trigger as Request));
            }
        }

		void StartLeaderElection()
        {
            raise(BecomeCandidate);
        }

        void VoteAsFollower()
        {
            VoteRequest request = trigger as VoteRequest;
            if (request.Term > this.CurrentTerm)
            {
                this.CurrentTerm = request.Term;
                this.VotedFor = null;
            }

            this.Vote(trigger as VoteRequest);
        }

        void RespondVoteAsFollower()
        {
            VoteResponse request = trigger as VoteResponse;
            if (request.Term > this.CurrentTerm)
            {
                this.CurrentTerm = request.Term;
                this.VotedFor = null;
            }
        }

        void AppendEntriesAsFollower()
        {
            AppendEntriesRequest request = trigger as AppendEntriesRequest;
            if (request.Term > this.CurrentTerm)
            {
                this.CurrentTerm = request.Term;
                this.VotedFor = null;
            }

            this.AppendEntries(trigger as AppendEntriesRequest);
        }

        void RespondAppendEntriesAsFollower()
        {
            AppendEntriesResponse request = this.ReceivedEvent as AppendEntriesResponse;
            if (request.Term > this.CurrentTerm)
            {
                this.CurrentTerm = request.Term;
                this.VotedFor = null;
            }
        }

		state Candidate
		{
			entry
			{
				this.CurrentTerm++;
				this.VotedFor = this.Id;
				this.VotesReceived = 1;

				send(this.ElectionTimer, EStartTimer);

				this.Logger.WriteLine("\n [Candidate] " + this.ServerId + " | term " + this.CurrentTerm + " | election votes " + this.VotesReceived + " | log " + this.Logs.Count + "\n");

				this.BroadcastVoteRequests();
			}

	        on Request do RedirectClientRequest;
			on VoteRequest do VoteAsCandidate;
			on VoteResponse do RespondVoteAsCandidate;
			on AppendEntriesRequest do AppendEntriesAsCandidate;
			on AppendEntriesResponse do RespondAppendEntriesAsCandidate;
			on ETimeout do StartLeaderElection;
			on PTimeout do BroadcastVoteRequests;
			on ShutDown do ShuttingDown;
			on BecomeLeader goto Leader;
			on BecomeFollower goto Follower;
			on BecomeCandidate goto Candidate;
		}

		void BroadcastVoteRequests()
        {
            // BUG: duplicate votes from same follower
            send(this.PeriodicTimer, PStartTimer);

            for (int idx = 0; idx < this.Servers.Count; idx++)
            {
                if (idx == this.ServerId)
                    continue;

                int lastLogIndex = this.Logs.Count;
                int lastLogTerm = this.GetLogTermForIndex(lastLogIndex);

                send(this.Servers[idx], VoteRequest, this.CurrentTerm, this.Id, lastLogIndex, lastLogTerm);
            }
        }

        void VoteAsCandidate()
        {
            VoteRequest request = trigger as VoteRequest;
            if (request.Term > this.CurrentTerm)
            {
                this.CurrentTerm = request.Term;
                this.VotedFor = null;
                this.Vote(trigger as VoteRequest);
                raise(BecomeFollower);
            }
            else
            {
                this.Vote(trigger as VoteRequest);
            }
        }

        void RespondVoteAsCandidate()
        {
            VoteResponse request = trigger as VoteResponse;
            if (request.Term > this.CurrentTerm)
            {
                this.CurrentTerm = request.Term;
                this.VotedFor = null;
                raise(BecomeFollower);
				return;
            }
            else if (request.Term != this.CurrentTerm)
            {
                return;
            }

            if (request.VoteGranted)
            {
                this.VotesReceived++;
                if (this.VotesReceived >= (this.Servers.Count / 2) + 1)
                {
                    this.Logger.WriteLine("\n [Leader] " + this.ServerId + " | term " + this.CurrentTerm +
                        " | election votes " + this.VotesReceived + " | log " + this.Logs.Count + "\n");
                    this.VotesReceived = 0;
                    raise(BecomeLeader);
                }
            }
        }

        void AppendEntriesAsCandidate()
        {
            AppendEntriesRequest request = trigger as AppendEntriesRequest;
            if (request.Term > this.CurrentTerm)
            {
                this.CurrentTerm = request.Term;
                this.VotedFor = null;
                this.AppendEntries(trigger as AppendEntriesRequest);
                raise(BecomeFollower);
            }
            else
            {
                this.AppendEntries(trigger as AppendEntriesRequest);
            }
        }

        void RespondAppendEntriesAsCandidate()
        {
            AppendEntriesResponse request = trigger as AppendEntriesResponse;
            if (request.Term > this.CurrentTerm)
            {
                this.CurrentTerm = request.Term;
                this.VotedFor = null;
                raise(BecomeFollower);
            }
        }

		state Leader
		{
			entry
			{
				monitor<SafetyMonitor>(NotifyLeaderElected, this.CurrentTerm);
				send(this.ClusterManager, NotifyLeaderUpdate, this.Id, this.CurrentTerm);

				int logIndex = this.Logs.Count;
				int logTerm = this.GetLogTermForIndex(logIndex);

				this.NextIndex.Clear();
				this.MatchIndex.Clear();
				for (int idx = 0; idx < this.Servers.Count; idx++)
				{
	                if (idx == this.ServerId)
						continue;
					this.NextIndex.Add(this.Servers[idx], logIndex + 1);
					this.MatchIndex.Add(this.Servers[idx], 0);
				}

				for (int idx = 0; idx < this.Servers.Count; idx++)
				{
	                if (idx == this.ServerId)
						continue;
					send(this.Servers[idx], AppendEntriesRequest, this.CurrentTerm, this.Id,
	                    logIndex, logTerm, new List<Log>(), this.CommitIndex, null);
				}
			}

			on Request do ProcessClientRequest;
			on VoteRequest do VoteAsLeader;
			on VoteResponse do RespondVoteAsLeader;
			on AppendEntriesRequest do AppendEntriesAsLeader;
			on AppendEntriesResponse do RespondAppendEntriesAsLeader;
			on ShutDown do ShuttingDown;
			on BecomeFollower goto Follower;
			ignore ETimeout, PTimeout;
		}

		void ProcessClientRequest()
        {
            this.LastClientRequest = trigger as Request;

            Log log = new Log(this.CurrentTerm, this.LastClientRequest.Command);
            this.Logs.Add(log);

            this.BroadcastLastClientRequest();
        }

        void BroadcastLastClientRequest()
        {
            this.Logger.WriteLine("\n [Leader] " + this.ServerId + " sends append requests | term " +
                this.CurrentTerm + " | log " + this.Logs.Count + "\n");

            int lastLogIndex = this.Logs.Count;

            this.VotesReceived = 1;
            for (int idx = 0; idx < this.Servers.Count; idx++)
            {
                if (idx == this.ServerId)
                    continue;

                machine server = this.Servers[idx];
                if (lastLogIndex < this.NextIndex[server])
                    continue;

                List<Log> logs = this.Logs.GetRange(this.NextIndex[server] - 1,
                    this.Logs.Count - (this.NextIndex[server] - 1));

                int prevLogIndex = this.NextIndex[server] - 1;
                int prevLogTerm = this.GetLogTermForIndex(prevLogIndex);

                send(server, AppendEntriesRequest, this.CurrentTerm, this.Id, prevLogIndex,
                    prevLogTerm, logs, this.CommitIndex, this.LastClientRequest.Client);
            }
        }

        void VoteAsLeader()
        {
            VoteRequest request = trigger as VoteRequest;

            if (request.Term > this.CurrentTerm)
            {
                this.CurrentTerm = request.Term;
                this.VotedFor = null;

                this.RedirectLastClientRequestToClusterManager();
                this.Vote(trigger as VoteRequest);

                raise(BecomeFollower);
            }
            else
            {
                this.Vote(trigger as VoteRequest);
            }
        }

        void RespondVoteAsLeader()
        {
            VoteResponse request = trigger as VoteResponse;
            if (request.Term > this.CurrentTerm)
            {
                this.CurrentTerm = request.Term;
                this.VotedFor = null;

                this.RedirectLastClientRequestToClusterManager();
                raise(BecomeFollower);
            }
        }

        void AppendEntriesAsLeader()
        {
            AppendEntriesRequest request = trigger as AppendEntriesRequest;
            if (request.Term > this.CurrentTerm)
            {
                this.CurrentTerm = request.Term;
                this.VotedFor = null;

                this.RedirectLastClientRequestToClusterManager();
                this.AppendEntries(trigger as AppendEntriesRequest);

                raise(BecomeFollower);
            }
        }

        void RespondAppendEntriesAsLeader()
        {
            AppendEntriesResponse request = trigger as AppendEntriesResponse;
            if (request.Term > this.CurrentTerm)
            {
                this.CurrentTerm = request.Term;
                this.VotedFor = null;

                this.RedirectLastClientRequestToClusterManager();
                raise(BecomeFollower);
				return;
            }
            else if (request.Term != this.CurrentTerm)
            {
                return;
            }

            if (request.Success)
            {
                this.NextIndex[request.Server] = this.Logs.Count + 1;
                this.MatchIndex[request.Server] = this.Logs.Count;

                this.VotesReceived++;
                if (request.ReceiverEndpoint != null &&
                    this.VotesReceived >= (this.Servers.Count / 2) + 1)
                {
                    this.Logger.WriteLine("\n [Leader] " + this.ServerId + " | term " + this.CurrentTerm +
                        " | append votes " + this.VotesReceived + " | append success\n");

                    int commitIndex = this.MatchIndex[request.Server];
                    if (commitIndex > this.CommitIndex &&
                        this.Logs[commitIndex - 1].Term == this.CurrentTerm)
                    {
                        this.CommitIndex = commitIndex;

                        this.Logger.WriteLine("\n [Leader] " + this.ServerId + " | term " + this.CurrentTerm + " | log " + this.Logs.Count + " | command " + this.Logs[commitIndex - 1].Command + "\n");
                    }

                    this.VotesReceived = 0;
                    this.LastClientRequest = null;

                    send(request.ReceiverEndpoint, Response);
                }
            }
            else
            {
                if (this.NextIndex[request.Server] > 1)
                {
                    this.NextIndex[request.Server] = this.NextIndex[request.Server] - 1;
                }

                List<Log> logs = this.Logs.GetRange(this.NextIndex[request.Server] - 1, this.Logs.Count - (this.NextIndex[request.Server] - 1));

                int prevLogIndex = this.NextIndex[request.Server] - 1;
                int prevLogTerm = this.GetLogTermForIndex(prevLogIndex);

                //this.Logger.WriteLine("\n [Leader] " + this.ServerId + " | term " + this.CurrentTerm + " | log " + this.Logs.Count + " | append votes " + this.VotesReceived + " | append fail (next idx = " + this.NextIndex[request.Server] + ")\n");

                send(request.Server, AppendEntriesRequest, this.CurrentTerm, this.Id, prevLogIndex,
                    prevLogTerm, logs, this.CommitIndex, request.ReceiverEndpoint);
            }
        }

		void Vote(VoteRequest request)
        {
            int lastLogIndex = this.Logs.Count;
            int lastLogTerm = this.GetLogTermForIndex(lastLogIndex);

            if (request.Term < this.CurrentTerm ||
                (this.VotedFor != null && this.VotedFor != request.CandidateId) ||
                lastLogIndex > request.LastLogIndex ||
                lastLogTerm > request.LastLogTerm)
            {
                this.Logger.WriteLine("\n [Server] " + this.ServerId + " | term " + this.CurrentTerm +
                    " | log " + this.Logs.Count + " | vote false\n");
                send(request.CandidateId, VoteResponse, this.CurrentTerm, false);
            }
            else
            {
                this.Logger.WriteLine("\n [Server] " + this.ServerId + " | term " + this.CurrentTerm +
                    " | log " + this.Logs.Count + " | vote true\n");

                this.VotedFor = request.CandidateId;
                this.LeaderId = null;

                send(request.CandidateId, VoteResponse, this.CurrentTerm, true);
            }
        }

        void AppendEntries(AppendEntriesRequest request)
        {
            if (request.Term < this.CurrentTerm)
            {
                this.Logger.WriteLine("\n [Server] " + this.ServerId + " | term " + this.CurrentTerm + " | log " +
                    this.Logs.Count + " | last applied: " + this.LastApplied + " | append false (< term)\n");

                send(request.LeaderId, AppendEntriesResponse, this.CurrentTerm, false, this.Id, request.ReceiverEndpoint);
            }
            else
            {
                if (request.PrevLogIndex > 0 &&
                    (this.Logs.Count < request.PrevLogIndex ||
                    this.Logs[request.PrevLogIndex - 1].Term != request.PrevLogTerm))
                {
                    this.Logger.WriteLine("\n [Server] " + this.ServerId + " | term " + this.CurrentTerm + " | log " +
                        this.Logs.Count + " | last applied: " + this.LastApplied + " | append false (not in log)\n");

                    send(request.LeaderId, AppendEntriesResponse, this.CurrentTerm, false, this.Id, request.ReceiverEndpoint);
                }
                else
                {
                    if (request.Entries.Count > 0)
                    {
                        int currentIndex = request.PrevLogIndex + 1;
                        foreach (Log entry in request.Entries)
                        {
                            if (this.Logs.Count < currentIndex)
                            {
                                this.Logs.Add(entry);
                            }
                            else if (this.Logs[currentIndex - 1].Term != entry.Term)
                            {
                                this.Logs.RemoveRange(currentIndex - 1, this.Logs.Count - (currentIndex - 1));
                                this.Logs.Add(entry);
                            }

                            currentIndex++;
                        }
                    }

                    if (request.LeaderCommit > this.CommitIndex &&
                        this.Logs.Count < request.LeaderCommit)
                    {
                        this.CommitIndex = this.Logs.Count;
                    }
                    else if (request.LeaderCommit > this.CommitIndex)
                    {
                        this.CommitIndex = request.LeaderCommit;
                    }

                    if (this.CommitIndex > this.LastApplied)
                    {
                        this.LastApplied++;
                    }

                    this.Logger.WriteLine("\n [Server] " + this.ServerId + " | term " + this.CurrentTerm + " | log " +
                        this.Logs.Count + " | entries received " + request.Entries.Count + " | last applied " +
                        this.LastApplied + " | append true\n");

                    this.LeaderId = request.LeaderId;
                    send(request.LeaderId, AppendEntriesResponse, this.CurrentTerm, true, this.Id, request.ReceiverEndpoint);
                }
            }
        }

        void RedirectLastClientRequestToClusterManager()
        {
            if (this.LastClientRequest != null)
            {
                send(this.ClusterManager, Request, this.LastClientRequest.Client, this.LastClientRequest.Command);
            }
        }

        int GetLogTermForIndex(int logIndex)
        {
            int logTerm = 0;
            if (logIndex > 0)
            {
                logTerm = this.Logs[logIndex - 1].Term;
            }

            return logTerm;
        }

        void ShuttingDown()
        {
            send(this.ElectionTimer, Halt);
            send(this.PeriodicTimer, Halt);

            raise(Halt);
        }
    }
}


