// ------------------------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License (MIT). See License.txt in the repo root for license information.
// ------------------------------------------------------------------------------------------------

using System;

namespace ReplicatingStorage
{
    machine StorageNode
    {
		machine Environment;
        machine NodeManager;
        int NodeId;
        int Data;
        machine SyncTimer;

		start state Init
		{
			entry
			{
				this.Data = 0;
				this.SyncTimer = create(SyncTimer);
				send(this.SyncTimer, SyConfigureEvent, this.Id);
			}

			on SConfigureEvent do Configure;
			on LocalEvent goto Active;
			defer Timeout;
		}

		void Configure()
        {
            this.Environment = (trigger as SConfigureEvent).Environment;
            this.NodeManager = (trigger as SConfigureEvent).NodeManager;
            this.NodeId = (trigger as SConfigureEvent).Id;

            this.Logger.WriteLine("\n [StorageNode-{0}] is up and running.\n", this.NodeId);

            monitor<LivenessMonitor>(NotifyNodeCreated, this.NodeId);
            send(this.Environment, NotifyNode, this.Id);

            raise(LocalEvent);
        }

		state Active
		{
			on StoreRequest do Store;
			on SyncRequest do Sync;
			on Timeout do GenerateSyncReport;
			on FaultInject do Terminate;
		}

		void Store()
        {
            var cmd = (trigger as StoreRequest).Command;
            this.Data += cmd;
            this.Logger.WriteLine("\n [StorageNode-{0}] is applying command {1}.\n", this.NodeId, cmd);
            monitor<LivenessMonitor>(NotifyNodeUpdate, this.NodeId, this.Data);
        }

        void Sync()
        {
            var data = (trigger as SyncRequest).Data;
            this.Data = data;
            this.Logger.WriteLine("\n [StorageNode-{0}] is syncing with data {1}.\n", this.NodeId, this.Data);
            monitor<LivenessMonitor>(NotifyNodeUpdate, this.NodeId, this.Data);
        }

        void GenerateSyncReport()
        {
            send(this.NodeManager, SyncReport, this.NodeId, this.Data);
        }

        void Terminate()
        {
            monitor<LivenessMonitor>(NotifyNodeFail, this.NodeId);
            send(this.SyncTimer, Halt);
            raise(Halt);
        }
    }
}
