// ------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace ReplicatingStorage
{
    machine Environment
    {
		MachineId NodeManager;
        int NumberOfReplicas;
		List<machine> AliveNodes;
        int NumberOfFaults;
		machine Client;
        machine FailureTimer;

		start state Init
		{
			entry
			{
				this.NumberOfReplicas = 3;
				this.NumberOfFaults = 1;
				this.AliveNodes = new List<machine>();

				monitor<LivenessMonitor>(LConfigureEvent, this.NumberOfReplicas);

				this.NodeManager = create(NodeManager);
				this.Client = create(Client);

				raise(LocalEvent);
			}

	        on LocalEvent goto Configuring;
		}

		state Configuring
		{
			entry
			{
				send(this.NodeManager, NConfigureEvent, this.Id, this.NumberOfReplicas);
				send(this.Client, CConfigureEvent, this.NodeManager);
				raise(LocalEvent);
			}

			on LocalEvent goto Active;
			defer Timeout;
		}

		void ConfiguringOnInit()
        {
            send(this.NodeManager, NConfigureEvent, this.Id, this.NumberOfReplicas);
            send(this.Client, CConfigureEvent, this.NodeManager);
            raise(LocalEvent);
        }

		state Active
		{
			on NotifyNode do UpdateAliveNodes;
			on Timeout do InjectFault;
		}

		void UpdateAliveNodes()
        {
            var node = (trigger as NotifyNode).Node;
            this.AliveNodes.Add(node);

			if (this.AliveNodes.Count == this.NumberOfReplicas &&
				this.FailureTimer == null)
			{
				this.FailureTimer = create(FailureTimer);
				send(this.FailureTimer, FConfigureEvent, this.Id);
			}
        }

		void InjectFault()
        {
            if (this.NumberOfFaults == 0 ||
                this.AliveNodes.Count == 0)
            {
                return;
            }

            var nodeId = this.RandomInteger(this.AliveNodes.Count);
            var node = this.AliveNodes[nodeId];

            this.Logger.WriteLine("\n [Environment] injecting fault.\n");

            send(node, FaultInject);
            send(this.NodeManager, NotifyFailure, node);
            this.AliveNodes.Remove(node);

            this.NumberOfFaults--;
            if (this.NumberOfFaults == 0)
            {
                send(this.FailureTimer, halt);
            }
        }
    }
}
